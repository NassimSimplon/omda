{"ast":null,"code":"var _jsxFileName = \"/home/nassim/omda/src/Components/CardSection/CardSection.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useMemo, useState } from \"react\";\nimport \"./CardSection.css\";\nimport { Link, Outlet } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CardSection = () => {\n  _s();\n  const [houses, setHouses] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const fetchData = async () => {\n    try {\n      const res = await fetch(\"https://api.mockfly.dev/mocks/5db56058-011b-4531-a0ce-90c32837abeb/nass/house/get\");\n      if (!res.ok) throw new Error(\"Failed to fetch data\");\n\n      // Log the response to see its structure\n      const data = await res.json();\n      console.log(\"API Response:\", data);\n      setHouses(data);\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n      setError(error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    fetchData();\n  }, []);\n  const houseList = useMemo(() => {\n    return houses === null || houses === void 0 ? void 0 : houses.map(house => /*#__PURE__*/_jsxDEV(Link, {\n      to: `one/${house.id}`,\n      className: \"card\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: house.img,\n        alt: house.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: house.owner || 'Unknown Owner'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Location: \", house.name || 'No Name']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Status: \", house.status || 'N/A']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 13\n      }, this)]\n    }, house.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 11\n    }, this));\n  }, [houses]);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 25\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"cardSection\",\n    children: [houseList.length > 0 ? houseList : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No houses available\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 49\n    }, this), /*#__PURE__*/_jsxDEV(Outlet, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n};\n_s(CardSection, \"yO1bC26y8DwZdN5zLFe5vTcnviE=\");\n_c = CardSection;\nvar _c;\n$RefreshReg$(_c, \"CardSection\");","map":{"version":3,"names":["React","useEffect","useMemo","useState","Link","Outlet","jsxDEV","_jsxDEV","CardSection","_s","houses","setHouses","loading","setLoading","error","setError","fetchData","res","fetch","ok","Error","data","json","console","log","message","houseList","map","house","to","id","className","children","src","img","alt","name","fileName","_jsxFileName","lineNumber","columnNumber","owner","status","length","_c","$RefreshReg$"],"sources":["/home/nassim/omda/src/Components/CardSection/CardSection.js"],"sourcesContent":["import React, { useEffect, useMemo, useState } from \"react\";\nimport \"./CardSection.css\";\nimport { Link, Outlet } from \"react-router-dom\";\nexport const CardSection = () => {\n    const [houses, setHouses] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n\n    const fetchData = async () => {\n        try {\n            const res = await fetch(\n                \"https://api.mockfly.dev/mocks/5db56058-011b-4531-a0ce-90c32837abeb/nass/house/get\" \n            );\n            if (!res.ok) throw new Error(\"Failed to fetch data\");\n\n            // Log the response to see its structure\n            const data = await res.json();\n            console.log(\"API Response:\", data);\n\n            setHouses(data);\n        } catch (error) {\n            console.error(\"Error fetching data:\", error);\n            setError(error.message);\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    useEffect(() => {\n        fetchData();\n    }, []);\n    const houseList = useMemo(() => {\n        return houses?.map((house) => (\n          <Link to={`one/${house.id}`} className=\"card\" key={house.id}>\n            <img src={house.img} alt={house.name} />\n            <h1>{house.owner || 'Unknown Owner'}</h1>\n            <p>Location: {house.name || 'No Name'}</p>\n            <p>Status: {house.status || 'N/A'}</p>\n          </Link>\n        ));\n      }, [houses]);\n\n    if (loading) return <p>Loading...</p>;\n    if (error) return <p>Error: {error}</p>;\n\n    return (\n        <div className=\"cardSection\">\n            {houseList.length > 0 ? houseList : <p>No houses available</p>}\n            <Outlet />\n        </div>\n    );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}