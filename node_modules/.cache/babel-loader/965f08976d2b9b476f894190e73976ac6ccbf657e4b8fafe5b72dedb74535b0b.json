{"ast":null,"code":"var _jsxFileName = \"/home/nassim/omda/src/Pages/Houses/id/oneHouse.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst OneHouse = () => {\n  _s();\n  const {\n    id\n  } = useParams();\n  const [houses, setHouses] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const fetchData = async () => {\n    try {\n      const res = await fetch(\"https://api.mockfly.dev/mocks/5db56058-011b-4531-a0ce-90c32837abeb/nass/house/get\");\n      if (!res.ok) throw new Error(\"Failed to fetch data\");\n\n      // Log the response to see its structure\n      const data = await res.json();\n      // console.log(\"API Response:\", data);\n      setHouses(data);\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n      setError(error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    fetchData();\n  }, []);\n  const houseList = useMemo(() => {\n    return houses === null || houses === void 0 ? void 0 : houses.filter(x => x.id === id).map(house => /*#__PURE__*/_jsxDEV(\"div\", {\n      to: `one/${house.id}`,\n      className: \"card\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: house.img,\n        alt: house.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: house.owner || 'Unknown Owner'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Location: \", house.name || 'No Name']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Status: \", house.status || 'N/A']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this)]\n    }, house.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }, this));\n  }, [houses]);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: houseList.length > 0 ? houseList : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No houses available\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 48\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_s(OneHouse, \"Fk7F/7NO8Qe01/O4zYugcbyfIFc=\", false, function () {\n  return [useParams];\n});\n_c = OneHouse;\nexport default OneHouse;\nvar _c;\n$RefreshReg$(_c, \"OneHouse\");","map":{"version":3,"names":["React","useEffect","useMemo","useState","useParams","jsxDEV","_jsxDEV","OneHouse","_s","id","houses","setHouses","loading","setLoading","error","setError","fetchData","res","fetch","ok","Error","data","json","console","message","houseList","filter","x","map","house","to","className","children","src","img","alt","name","fileName","_jsxFileName","lineNumber","columnNumber","owner","status","length","_c","$RefreshReg$"],"sources":["/home/nassim/omda/src/Pages/Houses/id/oneHouse.js"],"sourcesContent":["import React, { useEffect, useMemo, useState } from 'react'\nimport { useParams } from 'react-router-dom';\nconst OneHouse = () => {\n  const { id } = useParams();\n\n  const [houses, setHouses] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  const fetchData = async () => {\n      try {\n          const res = await fetch(\n              \"https://api.mockfly.dev/mocks/5db56058-011b-4531-a0ce-90c32837abeb/nass/house/get\" \n          );\n          if (!res.ok) throw new Error(\"Failed to fetch data\");\n\n          // Log the response to see its structure\n          const data = await res.json();\n          // console.log(\"API Response:\", data);\n          setHouses(data);\n      } catch (error) {\n          console.error(\"Error fetching data:\", error);\n          setError(error.message);\n      } finally {\n          setLoading(false);\n      }\n  };\n\n  useEffect(() => {\n      fetchData();\n  }, []);\n  const houseList = useMemo(() => {\n      return houses?.filter((x)=>x.id === id).map((house) => (\n        <div to={`one/${house.id}`} className=\"card\" key={house.id}>\n          <img src={house.img} alt={house.name} />\n          <h1>{house.owner || 'Unknown Owner'}</h1>\n          <p>Location: {house.name || 'No Name'}</p>\n          <p>Status: {house.status || 'N/A'}</p>\n        </div>\n      ));\n    }, [houses]);\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error: {error}</p>;\n  return (\n    <div>\n           {houseList.length > 0 ? houseList : <p>No houses available</p>}</div>\n  )\n}\n\nexport default OneHouse"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}